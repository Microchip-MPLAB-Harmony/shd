{% from 'macros.j2' import getMainBoardSettings %}
/*******************************************************************************
  Board Support Package Header File.

  Company:
    Microchip Technology Inc.

  File Name:
    bsp.h

  Summary:
    Board Support Package Header File 

  Description:
    This file contains constants, macros, type definitions and function
    declarations 
*******************************************************************************/

// DOM-IGNORE-BEGIN
/*******************************************************************************
* Copyright (C) 2023 Microchip Technology Inc. and its subsidiaries.
*
* Subject to your compliance with these terms, you may use Microchip software
* and any derivatives exclusively with Microchip products. It is your
* responsibility to comply with third party license terms applicable to your
* use of third party software (including open source software) that may
* accompany Microchip software.
*
* THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS". NO WARRANTIES, WHETHER
* EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE, INCLUDING ANY IMPLIED
* WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY, AND FITNESS FOR A
* PARTICULAR PURPOSE.
*
* IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE,
* INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND
* WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS
* BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE. TO THE
* FULLEST EXTENT ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS IN
* ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT OF FEES, IF ANY,
* THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.
*******************************************************************************/
// DOM-IGNORE-END

#ifndef BSP_H
#define BSP_H

// *****************************************************************************
// *****************************************************************************
// Section: Included Files
// *****************************************************************************
// *****************************************************************************
{% set board = namespace() %}
{% set deviceFamily = values["core"]["DeviceFamily"] %}
{% if variables["__TRUSTZONE_ENABLED"] is defined %}
    {% set trustZone = variables["__TRUSTZONE_ENABLED"] %}
{% else %}
    {% set trustZone = 'false' %}
{% endif %}
{% for component in values %}
  {% if "mainBoard_" in component %}
    {% set board.name = values[component]["SHD_MAINBOARD_NAME"] %}
    {% set board.ppio = values[component]["SHD_MAINBOARD_PIO_PERIPH"] %}
  {% endif %}
{% endfor %}

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>
#include "device.h"
{% if board.ppio in ['PORT_U2210'] or board.ppio in ['PORT_03720']%}
#include "peripheral/port/plib_port.h"
{% elif board.ppio in ['PIO_11264'] or board.ppio in ['PIO_11004']%}
#include "peripheral/pio/plib_pio.h"
{% elif board.ppio in ['GPIO_02610'] or board.ppio in ['GPIO_02922'] or board.ppio in ['GPIO_01618'] or board.ppio in ['GPIO_02467'] or board.ppio in ['GPIO_26'] or board.ppio in ['GPIO_04928']%}
#include "peripheral/gpio/plib_gpio.h"
{% endif %}

// *****************************************************************************
// *****************************************************************************
// Section: BSP Macros
// *****************************************************************************
// *****************************************************************************
{% if board.ppio in ['PORT_U2210'] or board.ppio in ['PORT_03720']%}
  {% from 'macros_port_u2210.j2' import generateOuputsHeaders, generateInputsHeaders %}
{% elif board.ppio in ['PIO_11264'] %}
  {% from 'macros_pio_11264.j2' import generateOuputsHeaders, generateInputsHeaders %}
{% elif board.ppio in ['PIO_11004'] %}
  {% from 'macros_pio_11004.j2' import generateOuputsHeaders, generateInputsHeaders %}
{% elif board.ppio in ['GPIO_02610'] or board.ppio in ['GPIO_02922'] or board.ppio in ['GPIO_01618']%}
  {% from 'macros_gpio_02922.j2' import generateOuputsHeaders, generateInputsHeaders %}
{% elif board.ppio in ['GPIO_02467'] %}
  {% if deviceFamily in ['PIC32CX_BZ'] %}
    {% from 'macros_gpio_02467_pic32c.j2' import generateOuputsHeaders, generateInputsHeaders %}
  {% else %}
    {% from 'macros_gpio_02467.j2' import generateOuputsHeaders, generateInputsHeaders %}
  {% endif %}
{% elif board.ppio in ['GPIO_26'] %}
  {% from 'macros_gpio_26.j2' import generateOuputsHeaders, generateInputsHeaders %}
{% elif board.ppio in ['GPIO_04928'] %}
  {% from 'macros_gpio_04928.j2' import generateOuputsHeaders, generateInputsHeaders %}
{% endif %}
#define {{ board.name|upper()|replace("-", "_") }}
#define BOARD_NAME    "{{ board.name|upper() }}"
{{ getMainBoardSettings(values) }}
{{ generateOuputsHeaders(trustZone, values.core) }}
{{ generateInputsHeaders(trustZone, values.core) }}

// *****************************************************************************
// *****************************************************************************
// Section: Interface Routines
// *****************************************************************************
// *****************************************************************************

// *****************************************************************************
/* Function:
    void BSP_Initialize(void)

  Summary:
    Performs the necessary actions to initialize a board

  Description:
    This function initializes the LED and Switch ports on the board.  This
    function must be called by the user before using any APIs present on this
    BSP.

  Precondition:
    None.

  Parameters:
    None

  Returns:
    None.

  Example:
    <code>
    BSP_Initialize();
    </code>

  Remarks:
    None
*/

void BSP_Initialize(void);

#endif // BSP_H

/*******************************************************************************
 End of File
*/
{# 
// Variables
{% for var in variables %}
// {{ var }}: {{ variables[var] }}
{% endfor %}

// Core Symbols
{% for value in values %}
  // {{ value }}
  {% for symbol in values[value] %}
    // {{ symbol }}: {{ values[value][symbol] }}
  {% endfor %}
{% endfor %} 
#}