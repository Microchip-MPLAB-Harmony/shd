{% macro generateOuputsHeaders(genSecure, core) %}
    {% set numPinTotal = core["GPIO_PIN_MAX_INDEX"] %}
    {% for pinNumber in  range(1, numPinTotal + 1) %}
        {% set funcTypeSymName = "PIN_{}_FUNCTION_TYPE".format(pinNumber) %}
        {% set directionSymName = "PIN_{}_DIR".format(pinNumber) %}
        {% set funcType = core[funcTypeSymName] %}
        {% set direction = core[directionSymName] %}
        {% if ((funcType == 'GPIO' and direction.lower() == 'out') or ('LED' in funcType)) %}
                {% set funcNameSymName = "PIN_{}_FUNCTION_NAME".format(pinNumber) %}
                {% set funcName = core[funcNameSymName] %}
                {% set portSymName = "PIN_{}_GPIO_CTRL_REG_NUM".format(pinNumber) %}
                {% set port = core[portSymName] %}
                {% set pinSymName = "PIN_{}_GPIO_CTRL_REG_INDEX".format(pinNumber) %}
                {% set pin = core[pinSymName] %}
                {% set pinNameSymName = "GPIO_PIN_NAME_{}".format(pinNumber) %}
                {% set pinName = core[pinNameSymName] %}
                {% set latchSymName = "PIN_{}_LAT".format(pinNumber) %}
                {% set latch = core[latchSymName] %}

/*** OUTPUT PIO Macros for {{ funcName }} ***/
#define BSP_{{ funcName|upper() }}_PIN        GPIO_PIN_{{ pinName }}
#define BSP_{{ funcName|upper() }}_Get()      ((GPIO_REGS->GPIO_CTRL{{ port }}[{{ pin }}] & GPIO_CTRL0_GPIO_INP_Msk)? 1 : 0)
{% if latch.lower() == "high" -%} 
#define BSP_{{ funcName|upper() }}_On()       (GPIO_REGS->GPIO_CTRL{{ port }}[{{ pin }}] &= ~GPIO_CTRL0_ALT_GPIO_DATA_Msk)
#define BSP_{{ funcName|upper() }}_Off()      (GPIO_REGS->GPIO_CTRL{{ port }}[{{ pin }}] |= GPIO_CTRL0_ALT_GPIO_DATA_Msk)
{% else -%}   
#define BSP_{{ funcName|upper() }}_On()       (GPIO_REGS->GPIO_CTRL{{ port }}[{{ pin }}] |= GPIO_CTRL0_ALT_GPIO_DATA_Msk)
#define BSP_{{ funcName|upper() }}_Off()      (GPIO_REGS->GPIO_CTRL{{ port }}[{{ pin }}] &= ~GPIO_CTRL0_ALT_GPIO_DATA_Msk)
{% endif -%}  
#define BSP_{{ funcName|upper() }}_Toggle()   (GPIO_REGS->GPIO_CTRL{{ port }}[{{ pin }}] ^= GPIO_CTRL0_ALT_GPIO_DATA_Msk)

        {% endif %}
    {% endfor %}
{% endmacro %}

{% macro generateInputsHeaders(genSecure, core) %}
    {% set numPinTotal = core["GPIO_PIN_MAX_INDEX"] %}
    {% for pinNumber in  range(1, numPinTotal + 1) %}
        {% set funcTypeSymName = "PIN_{}_FUNCTION_TYPE".format(pinNumber) %}
        {% set directionSymName = "PIN_{}_DIR".format(pinNumber) %}
        {% set funcType = core[funcTypeSymName] %}
        {% set direction = core[directionSymName] %}
        {% if funcType == 'GPIO' %}
            {% if direction.lower() != 'out' %}
                {% set funcNameSymName = "PIN_{}_FUNCTION_NAME".format(pinNumber) %}
                {% set funcName = core[funcNameSymName] %}
                {% set portSymName = "PIN_{}_GPIO_CTRL_REG_NUM".format(pinNumber) %}
                {% set port = core[portSymName] %}
                {% set pinSymName = "PIN_{}_GPIO_CTRL_REG_INDEX".format(pinNumber) %}
                {% set pin = core[pinSymName] %}
                {% set pullupSymName = "PIN_{}_PUPD".format(pinNumber) %}
                {% set pullup = core[pullupSymName] %}
                {% set pinNameSymName = "GPIO_PIN_NAME_{}".format(pinNumber) %}
                {% set pinName = core[pinNameSymName] %}
/*** INPUT PIO Macros for {{ funcName|upper() }} ***/
#define BSP_{{ funcName|upper() }}_PIN                    GPIO_PIN_{{ pinName }}
#define BSP_{{ funcName|upper() }}_Get()                  ((GPIO_REGS->GPIO_CTRL{{ port }}[{{ pin }}] & GPIO_CTRL0_GPIO_INP_Msk)? 1 : 0)
{% if pullup.lower() == "pull up" -%}   
#define BSP_{{ funcName|upper() }}_STATE_PRESSED          0
#define BSP_{{ funcName|upper() }}_STATE_RELEASED         1
{% else -%}   
#define BSP_{{ funcName|upper() }}_STATE_PRESSED          1
#define BSP_{{ funcName|upper() }}_STATE_RELEASED         0
{% endif -%}  

            {% endif %}
        {% endif %}
    {% endfor %}
{% endmacro %}

{% macro generateLedsInitialization(core) %}
    {% set numPinTotal = core["GPIO_PIN_MAX_INDEX"] %}
    {% for pinNumber in  range(1, numPinTotal + 1) %}
        {% set funcTypeSymName = "PIN_{}_FUNCTION_TYPE".format(pinNumber) %}
        {% set directionSymName = "PIN_{}_DIR".format(pinNumber) %}
        {% set funcType = core[funcTypeSymName] %}
        {% set direction = core[directionSymName] %}
        {% if ((funcType == 'GPIO' and direction.lower() == 'out') or ('LED' in funcType)) %}
                {% set funcNameSymName = "PIN_{}_FUNCTION_NAME".format(pinNumber) %}
                {% set funcName = core[funcNameSymName] %}
                {% if 'led' in funcName.lower() %}
    /* Switch off {{ funcName|upper() }} */
    BSP_{{ funcName|upper() }}_Off();
                {% endif %}
        {% endif %}
    {% endfor %}
{% endmacro %}
