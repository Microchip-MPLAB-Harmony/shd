{% macro generateOuputsHeaders(trustzone, core) %}
    {% set numPinCount = core["PORT_PIN_COUNT"] %}
    {% set portRegName = core["PORT_REG_NAME"] %}
    {% set pinStatus = namespace() %}
    {% for pinNumber in  range(1, numPinCount + 1) %}
        {% set funcTypeSymName = "PIN_{}_FUNCTION_TYPE".format(pinNumber) %}
        {% set directionSymName = "PIN_{}_DIR".format(pinNumber) %}
        {% set funcType = core[funcTypeSymName] %}
        {% set direction = core[directionSymName] %}
        {% if funcType == 'GPIO' %}
            {% if direction.lower() == 'out' %}
                {% set pinStatus.visible = 'true' %}
                {% if trustzone == 'true' %}
                    {% set pinIsSecure = "PIN_{}_IS_NON_SECURE".format(pinNumber) %}
                    {% set secure = core[pinIsSecure] %}
                    {% if secure != 'SECURE' %}
                        {% set pinStatus.visible = 'false' %}
                    {% endif %}
                {% endif %}
                {% if pinStatus.visible == 'true' %}
                    {% set funcNameSymName = "PIN_{}_FUNCTION_NAME".format(pinNumber) %}
                    {% set funcName = core[funcNameSymName] %}
                    {% set pinGroupSymName = "PIN_{}_GROUP".format(pinNumber) %}
                    {% set group = core[pinGroupSymName] %}
                    {% set expNameSymName = "PIN_{}_EXPORT_NAME".format(pinNumber) %}
                    {% set expName = core[expNameSymName] %}
                    {% set port = expName.split(":")[1][1] %}
                    {% set pin = core["PIN_{}_PORT_PIN".format(pinNumber)] %}
/*** Macros for {{ funcName }} output pin ***/ 
#define BSP_{{ funcName|upper() }}_PIN        {{ portRegName }}_PIN_P{{ port }}{{ pin }}
#define BSP_{{ funcName|upper() }}_Get()      (({{ portRegName }}_REGS->GROUP[{{ group }}].PORT_IN >> {{ pin }}U) & 0x01U)
#define BSP_{{ funcName|upper() }}_Set()      ({{ portRegName }}_REGS->GROUP[{{ group }}].PORT_OUTSET = ((uint32_t)1U << {{ pin }}U))
#define BSP_{{ funcName|upper() }}_Clear()    ({{ portRegName }}_REGS->GROUP[{{ group }}].PORT_OUTCLR = ((uint32_t)1U << {{ pin }}U))
#define BSP_{{ funcName|upper() }}_Toggle()   ({{ portRegName }}_REGS->GROUP[{{ group }}].PORT_OUTTGL = ((uint32_t)1U << {{ pin }}U))
                    {% set latchSymName = "PIN_{}_LAT".format(pinNumber) %}
                    {% set latch = core[latchSymName] %}
                    {% if latch == 'High' %}
#define BSP_{{ funcName|upper() }}_On()       BSP_{{ funcName|upper() }}_Clear()
#define BSP_{{ funcName|upper() }}_Off()      BSP_{{ funcName|upper() }}_Set() 
                    {% else %}
#define BSP_{{ funcName|upper() }}_On()       BSP_{{ funcName|upper() }}_Set()
#define BSP_{{ funcName|upper() }}_Off()      BSP_{{ funcName|upper() }}_Clear() 
                    {% endif %}

                {% endif %}
            {% endif %}
        {% endif %}
    {% endfor %}
{% endmacro %}

{% macro generateInputsHeaders(trustzone, core) %}
    {% set numPinCount = core["PORT_PIN_COUNT"] %}
    {% set portRegName = core["PORT_REG_NAME"] %}
    {% set pinStatus = namespace() %}
    {% for pinNumber in  range(1, numPinCount + 1) %}
        {% set funcTypeSymName = "PIN_{}_FUNCTION_TYPE".format(pinNumber) %}
        {% set directionSymName = "PIN_{}_DIR".format(pinNumber) %}
        {% set funcType = core[funcTypeSymName] %}
        {% set direction = core[directionSymName] %}
        {% if funcType == 'GPIO' %}
            {% if direction.lower() != 'out' %}
                {% set pinStatus.visible = 'true' %}
                {% if trustzone == 'true' %}
                    {% set pinIsSecure = "PIN_{}_IS_NON_SECURE".format(pinNumber) %}
                    {% set secure = core[pinIsSecure] %}
                    {% if secure != 'SECURE' %}
                        {% set pinStatus.visible = 'false' %}
                    {% endif %}
                {% endif %}
                {% if pinStatus.visible == 'true' %}
                    {% set funcNameSymName = "PIN_{}_FUNCTION_NAME".format(pinNumber) %}
                    {% set funcName = core[funcNameSymName] %}
                    {% set pinGroupSymName = "PIN_{}_GROUP".format(pinNumber) %}
                    {% set group = core[pinGroupSymName] %}
                    {% set expNameSymName = "PIN_{}_EXPORT_NAME".format(pinNumber) %}
                    {% set expName = core[expNameSymName] %}
                    {% set port = expName.split(":")[1][1] %}
                    {% set pin = core["PIN_{}_PORT_PIN".format(pinNumber)] %}
                    {% set pullupSymName = "PIN_{}_PU".format(pinNumber) %}
                    {% set pullup = core[pullupSymName] %}
/*** Macros for {{ funcName }} input pin ***/ 
#define BSP_{{ funcName|upper() }}_PIN                    {{ portRegName }}_PIN_P{{ port }}{{ pin }}
#define BSP_{{ funcName|upper() }}_Get()                  (({{ portRegName }}_REGS->GROUP[{{ group }}].PORT_IN >> {{ pin }}U) & 0x01U)
                    {% if pullup == "True" -%}   
#define BSP_{{ funcName|upper() }}_STATE_PRESSED          0
#define BSP_{{ funcName|upper() }}_STATE_RELEASED         1
                    {% else -%}   
#define BSP_{{ funcName|upper() }}_STATE_PRESSED          1
#define BSP_{{ funcName|upper() }}_STATE_RELEASED         0
                    {% endif -%}  

                {% endif %}
            {% endif %}
        {% endif %}
    {% endfor %}
{% endmacro %}

{% macro generateLedsInitialization(core) %}
    {% set numPinTotal = core["PIO_PIN_TOTAL"] %}
    {% for pinNumber in  range(1, numPinTotal + 1) %}
        {% set funcTypeSymName = "PIN_{}_FUNCTION_TYPE".format(pinNumber) %}
        {% set directionSymName = "PIN_{}_DIR".format(pinNumber) %}
        {% set funcType = core[funcTypeSymName] %}
        {% set direction = core[directionSymName] %}
        {% if funcType == 'GPIO' %}
            {% if direction.lower() == 'out' %}
                {% set funcNameSymName = "PIN_{}_FUNCTION_NAME".format(pinNumber) %}
                {% set funcName = core[funcNameSymName] %}
                {% if 'led' in funcName.lower() %}
    /* Switch off {{ funcName|upper() }} */
    BSP_{{ funcName|upper() }}_Off();
                {% endif %}
            {% endif %}
        {% endif %}
    {% endfor %}
{% endmacro %}
